# serverless.xml for telegram-bot-stampers
#
# For full config options, check the docs:
#    docs.serverless.com

service: StampersTestBot

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
  stage: dev
  region: eu-west-1
  # Additional acccess
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - Fn::GetAtt: [ tablesubscriptions, Arn ]
  # service wide environment variables here
  environment:
    PROVIDER_STAGE: ${self:provider.stage}
    SERVICE: ${self:service}
    TELEGRAM_TOKEN: ${ssm:/telegram/token/StampersTestBot}
    TZ: 'Europe/Amsterdam'
    TABLE_SUBSCRIPTIONS: ${self:custom.table.subscriptions}
custom:
  table:
    subscriptions: subscriptions
# packaging information here
package:
#  include:
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - .idea/

functions:
  post:
    handler: handler.incoming
    events:
      - http:
          path: incoming
          method: post
          cors: true
  sendddaily:
    handler: daily.main
    events:
      - schedule: cron(0 6 * * ? *)
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    PostLogGroup:
      Properties:
        RetentionInDays: 7
    SenddailyLogGroup:
      Properties:
        RetentionInDays: 7
    tablesubscriptions:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-${self:custom.table.subscriptions}
        AttributeDefinitions:
        - AttributeName: dummy
          AttributeType: N
        - AttributeName: event
          AttributeType: S
        KeySchema:
        - AttributeName: dummy
          KeyType: HASH
        - AttributeName: event
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
    topicdynamodb:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: dynamodb
    snspolicydynamodb:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
        - Ref: topicdynamodb
        PolicyDocument:
          Version: '2008-10-17'
          Id: __default_policy_ID
          Statement:
          - Sid: __default_statement_ID
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
            - SNS:GetTopicAttributes
            - SNS:SetTopicAttributes
            - SNS:AddPermission
            - SNS:RemovePermission
            - SNS:DeleteTopic
            - SNS:Subscribe
            - SNS:ListSubscriptionsByTopic
            - SNS:Publish
            - SNS:Receive
            Resource:
              Ref: topicdynamodb
            Condition:
              StringEquals:
                AWS:SourceOwner:
                  Ref: AWS::AccountId
    alarmsubscriptionsReadCapacityUnitsLimitBasicAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        ActionsEnabled: 'true'
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: '5'
        MetricName: ConsumedReadCapacityUnits
        Namespace: AWS/DynamoDB
        Period: '60'
        Statistic: Sum
        Threshold: '240.0'
        AlarmActions:
         - Ref: topicdynamodb
        Dimensions:
        - Name: TableName
          Value:
            Ref: tablesubscriptions
    alarmsubscriptionsWriteCapacityUnitsLimitBasicAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        ActionsEnabled: 'true'
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: '5'
        MetricName: ConsumedWriteCapacityUnits
        Namespace: AWS/DynamoDB
        Period: '60'
        Statistic: Sum
        Threshold: '240.0'
        AlarmActions:
         - Ref: topicdynamodb
        Dimensions:
        - Name: TableName
          Value:
            Ref: tablesubscriptions
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
